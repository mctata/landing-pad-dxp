openapi: 3.0.0
info:
  title: Landing Pad DXP API
  description: API documentation for the Landing Pad Digital Experience Platform
  version: 1.0.0
  contact:
    name: Landing Pad DXP Support
    email: support@landingpad.dev
servers:
  - url: /api
    description: Main API
tags:
  - name: auth
    description: Authentication endpoints
  - name: users
    description: User management
  - name: projects
    description: Website projects
  - name: templates
    description: Website templates
  - name: websites
    description: Website management and publishing
  - name: domains
    description: Custom domain management
  - name: images
    description: Image management and stock photos
  - name: ai
    description: AI content generation
  - name: admin
    description: Admin dashboard endpoints
  - name: health
    description: API health checks

paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: User login
      description: Authenticate a user and return a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
        '500':
          description: Server error

  /auth/register:
    post:
      tags:
        - auth
      summary: User registration
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input or email already exists
        '500':
          description: Server error

  /auth/me:
    get:
      tags:
        - auth
      summary: Get current user
      description: Get the currently authenticated user's information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - invalid or expired token
        '500':
          description: Server error

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Get a user by their ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found
        '500':
          description: Server error

  /projects:
    get:
      tags:
        - projects
      summary: Get user projects
      description: Get all projects for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
        '500':
          description: Server error
    post:
      tags:
        - projects
      summary: Create a new project
      description: Create a new project for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
                templateId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  project:
                    $ref: '#/components/schemas/Project'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /templates:
    get:
      tags:
        - templates
      summary: Get templates
      description: Get all available templates
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  templates:
                    type: array
                    items:
                      $ref: '#/components/schemas/Template'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /websites/{websiteId}/publish:
    post:
      tags:
        - websites
      summary: Publish a website
      description: Create a new deployment for a website
      security:
        - bearerAuth: []
      parameters:
        - name: websiteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Website publishing initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Website publishing initiated
                  deployment:
                    $ref: '#/components/schemas/Deployment'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Website not found
        '409':
          description: A deployment is already in progress
        '500':
          description: Server error

  /websites/{websiteId}/domains:
    get:
      tags:
        - domains
      summary: Get domains for a website
      description: Get all domains for a specific website
      security:
        - bearerAuth: []
      parameters:
        - name: websiteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of domains
          content:
            application/json:
              schema:
                type: object
                properties:
                  domains:
                    type: array
                    items:
                      $ref: '#/components/schemas/Domain'
        '401':
          description: Unauthorized
        '404':
          description: Website not found
        '500':
          description: Server error
    post:
      tags:
        - domains
      summary: Add a domain to a website
      description: Add a new custom domain to a website
      security:
        - bearerAuth: []
      parameters:
        - name: websiteId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: example.com
      responses:
        '201':
          description: Domain added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Domain added successfully
                  domain:
                    $ref: '#/components/schemas/Domain'
        '400':
          description: Invalid input or domain already in use
        '401':
          description: Unauthorized
        '404':
          description: Website not found
        '500':
          description: Server error

  /images/upload:
    post:
      tags:
        - images
      summary: Upload an image
      description: Upload an image to the server
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Image uploaded successfully
                  image:
                    $ref: '#/components/schemas/Image'
        '400':
          description: Invalid input or no image provided
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /images/stock/search:
    get:
      tags:
        - images
      summary: Search stock photos
      description: Search for stock photos via Unsplash API
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
        - name: orientation
          in: query
          schema:
            type: string
            enum: [landscape, portrait, squarish]
            default: landscape
      responses:
        '200':
          description: Stock photo search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/StockPhoto'
                  total:
                    type: integer
                  totalPages:
                    type: integer
        '400':
          description: Invalid input or missing query
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /ai/generate/content:
    post:
      tags:
        - ai
      summary: Generate AI content
      description: Generate content using AI
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - websiteId
                - pageId
                - elementType
                - prompt
              properties:
                websiteId:
                  type: string
                  format: uuid
                pageId:
                  type: string
                  format: uuid
                elementType:
                  type: string
                  enum: [headline, paragraph, cta, list]
                prompt:
                  type: string
                tone:
                  type: string
                  enum: [professional, casual, friendly, formal]
                length:
                  type: string
                  enum: [short, medium, long]
      responses:
        '200':
          description: Generated content
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    type: string
                  metadata:
                    type: object
                    properties:
                      modelUsed:
                        type: string
                      tokensUsed:
                        type: integer
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /admin/stats:
    get:
      tags:
        - admin
      summary: Get admin dashboard stats
      description: Get statistics for the admin dashboard
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin dashboard statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  stats:
                    type: object
                    properties:
                      users:
                        type: integer
                      websites:
                        type: integer
                      deployments:
                        type: integer
                      domains:
                        type: integer
                      failedDeployments:
                        type: integer
                      activeDomains:
                        type: integer
                  recentDeployments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Deployment'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - requires admin role
        '500':
          description: Server error

  /health:
    get:
      tags:
        - health
      summary: API health check
      description: Check if the API is running
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
        subscription:
          type: string
          enum: [free, pro, enterprise]
        status:
          type: string
          enum: [active, inactive, suspended]
        emailVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        userId:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, archived]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Template:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        category:
          type: string
        thumbnail:
          type: string
          format: uri
        popularity:
          type: number
          format: float
        isFeatured:
          type: boolean
        isNew:
          type: boolean
        isPremium:
          type: boolean

    Deployment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        websiteId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        status:
          type: string
          enum: [queued, in_progress, success, failed]
        version:
          type: string
        commitMessage:
          type: string
        completedAt:
          type: string
          format: date-time
        buildTime:
          type: integer
          description: Build time in milliseconds
        errorMessage:
          type: string
        buildLogs:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Domain:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        websiteId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, active, error]
        verificationStatus:
          type: string
          enum: [pending, verified, failed]
        isPrimary:
          type: boolean
        dnsRecords:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [A, CNAME, TXT, MX]
              host:
                type: string
              value:
                type: string
              ttl:
                type: integer
        verificationErrors:
          type: string
        lastVerifiedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        fileName:
          type: string
        originalName:
          type: string
        filePath:
          type: string
        fileSize:
          type: integer
        mimeType:
          type: string
        createdAt:
          type: string
          format: date-time

    StockPhoto:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        url:
          type: string
          format: uri
        thumbnail:
          type: string
          format: uri
        photographer:
          type: string
        photographerUrl:
          type: string
          format: uri

    Pagination:
      type: object
      properties:
        totalItems:
          type: integer
        itemsPerPage:
          type: integer
        currentPage:
          type: integer
        totalPages:
          type: integer