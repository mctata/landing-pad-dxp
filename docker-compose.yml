version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: landing-pad-backend
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY=${API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RUN_WORKER_IN_PROCESS=false
      - VERCEL_API_TOKEN=${VERCEL_API_TOKEN}
      - VERCEL_PROJECT_ID=${VERCEL_PROJECT_ID}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
    restart: unless-stopped
    networks:
      - landing-pad-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
      
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: landing-pad-worker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - VERCEL_API_TOKEN=${VERCEL_API_TOKEN}
      - VERCEL_PROJECT_ID=${VERCEL_PROJECT_ID}
    restart: unless-stopped
    networks:
      - landing-pad-network
    depends_on:
      - redis
      - backend
      
  redis:
    image: redis:alpine
    container_name: landing-pad-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - landing-pad-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: landing-pad-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_PUBLIC_API_URL=http://backend:3000
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - landing-pad-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  landing-pad-network:
    driver: bridge
    
volumes:
  redis-data: